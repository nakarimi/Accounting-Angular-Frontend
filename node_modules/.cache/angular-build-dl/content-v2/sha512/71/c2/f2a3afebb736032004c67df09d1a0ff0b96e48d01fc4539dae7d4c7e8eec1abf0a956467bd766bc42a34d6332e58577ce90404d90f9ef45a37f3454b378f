{"version":3,"sources":["./src/app/components/user/adduser.component.html","./src/app/components/user/user.component.html","./src/app/components/user/user.component.css","./src/app/components/user/user.component.ts","./src/app/components/user/user.module.ts"],"names":[],"mappings":"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","file":"components-user-user-module-es2015.js","sourcesContent":["export default \"<h2 mat-dialog-title>Add User</h2>\\n<mat-dialog-content class=\\\"mat-typography\\\">\\n          <form [formGroup]=\\\"regForm\\\" (ngSubmit)=\\\"authentication()\\\">\\n              <mat-form-field>\\n                <mat-label>Username</mat-label>\\n                <input (change)=\\\"checkUsername()\\\" type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"username\\\" required matInput [autofocus]=\\\"true\\\"\\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('username').errors && regForm.get('username').errors.required\\\">\\n                  Username is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('username').errors && regForm.get('username').errors.minlength\\\">\\n                  Username must be at least 5 characters long.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('username').errors && regForm.get('username').errors.maxlength\\\">\\n                  Username must be at most 25 characters long.\\n                </mat-error>\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>Email</mat-label>\\n                <input (change)=\\\"checkEmail()\\\" type=\\\"email\\\" autocomplete=\\\"off\\\" formControlName=\\\"email\\\" required matInput \\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('email').errors && regForm.get('email').errors.required\\\">\\n                  Email is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('email').errors && regForm.get('email').errors.email\\\">\\n                  Email format is not correct.\\n                </mat-error>\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>First Name</mat-label>\\n                <input type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"first_name\\\" required matInput\\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                  <mat-error *ngIf=\\\"regForm.get('first_name').errors && regForm.get('first_name').errors.required\\\">\\n                    First Name is required.\\n                  </mat-error>\\n                  <mat-error *ngIf=\\\"regForm.get('first_name').errors && regForm.get('first_name').errors.minlength\\\">\\n                    First Name must be at least 5 characters long.\\n                  </mat-error>\\n                  <mat-error *ngIf=\\\"regForm.get('first_name').errors && regForm.get('first_name').errors.maxlength\\\">\\n                    First Name must be at most 25 characters long.\\n                  </mat-error>\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>Last Name</mat-label>\\n                <input type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"last_name\\\" required matInput \\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('last_name').errors && regForm.get('last_name').errors.required\\\">\\n                  Last Name is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('last_name').errors && regForm.get('last_name').errors.minlength\\\">\\n                  Last Name must be at least 5 characters long.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('last_name').errors && regForm.get('last_name').errors.maxlength\\\">\\n                  Last Name must be at most 25 characters long.\\n                </mat-error>\\n              </mat-form-field>\\n              <div>\\n                <label>Is Superuser: </label>\\n                <mat-checkbox formControlName=\\\"is_superuser\\\">Yes</mat-checkbox>\\n              </div>\\n              <mat-form-field>\\n                <mat-label>Password</mat-label>\\n                <input type=\\\"password\\\" autocomplete=\\\"off\\\" formControlName=\\\"password\\\" autocomplete=\\\"new-password\\\" required\\n                  matInput  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('password').errors && regForm.get('password').errors.required\\\">\\n                  Password is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('password').errors && regForm.get('password').errors.minlength\\\">\\n                  Password must be at least 5 characters long.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('password').errors && regForm.get('password').errors.maxlength\\\">\\n                  Password must be at most 25 characters long.\\n                </mat-error>\\n\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>Repeat Password</mat-label>\\n                <input type=\\\"password\\\" formControlName=\\\"conf_password\\\" autocomplete=\\\"off\\\" required matInput \\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error>\\n                  Passwords do not match, please check passwords and try again.\\n                </mat-error>\\n              </mat-form-field>\\n          \\n              <button type=\\\"submit\\\" mat-button>Create</button>\\n          </form>\\n</mat-dialog-content>\"","export default \"<button class=\\\"m-1 text-white bg-success\\\" mat-raised-button mat-button (click)=\\\"openAddDialog()\\\">Add <mat-icon>add</mat-icon></button>\\n\\n<table width=\\\"100%\\\" mat-table [dataSource]=\\\"dataSource\\\" matSort matSortActive=\\\"id\\\" matSortDisableClear\\n  matSortDirection=\\\"desc\\\">\\n\\n  <!-- Number Column -->\\n  <ng-container matColumnDef=\\\"username\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Username</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.username}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"email\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.email}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"first_name\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.first_name}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"last_name\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Name</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.last_name}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"is_active\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Is Active</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.is_active}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"date_joined\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Date Joined</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{ row.date_joined | date: 'MMM d, y' }}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"is_superuser\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Is Superuser</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">\\n      <div [ngClass]=\\\"['super', 'superuser']\\\" *ngIf=\\\"row.is_superuser\\\">\\n        <mat-icon>check_circle</mat-icon>\\n        <div [ngClass]=\\\"'superusersync'\\\" (click)=\\\"switchSuperUser(row)\\\">\\n          <mat-icon>sync</mat-icon>\\n        </div>\\n      </div>\\n      <div [ngClass]=\\\"['nosuper', 'superuser']\\\" *ngIf=\\\"!row.is_superuser\\\">\\n        <mat-icon>cancel</mat-icon>\\n        <div [ngClass]=\\\"'superusersync'\\\" (click)=\\\"switchSuperUser(row)\\\">\\n          <mat-icon>sync</mat-icon>\\n        </div>\\n      </div>\\n      \\n    </td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"last_login\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Login</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{ row.last_login | date: 'MMM d, y HH:MM:SS' }}</td>\\n  </ng-container>\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\n</table>\"","export default \".superuser{\\r\\n  float: left;\\r\\n  width: 50px;\\r\\n}\\r\\n.superuser.super > .mat-icon {\\r\\n  color: chartreuse;\\r\\n}\\r\\n.superuser.nosuper > .mat-icon {\\r\\n  color:crimson;\\r\\n}\\r\\n.superusersync{\\r\\n  cursor: pointer;\\r\\n  display: none;\\r\\n  float: right;\\r\\n}\\r\\n.superuser:hover > .superusersync{\\r\\n  display: block;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy91c2VyL3VzZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7RUFDWCxXQUFXO0FBQ2I7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsYUFBYTtBQUNmO0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLFlBQVk7QUFDZDtBQUNBO0VBQ0UsY0FBYztBQUNoQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci91c2VyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3VwZXJ1c2Vye1xyXG4gIGZsb2F0OiBsZWZ0O1xyXG4gIHdpZHRoOiA1MHB4O1xyXG59XHJcbi5zdXBlcnVzZXIuc3VwZXIgPiAubWF0LWljb24ge1xyXG4gIGNvbG9yOiBjaGFydHJldXNlO1xyXG59XHJcbi5zdXBlcnVzZXIubm9zdXBlciA+IC5tYXQtaWNvbiB7XHJcbiAgY29sb3I6Y3JpbXNvbjtcclxufVxyXG5cclxuLnN1cGVydXNlcnN5bmN7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgZmxvYXQ6IHJpZ2h0O1xyXG59IFxyXG4uc3VwZXJ1c2VyOmhvdmVyID4gLnN1cGVydXNlcnN5bmN7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn0iXX0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ApiService } from '../../api.service';\nimport { MatTableDataSource, MatSort, MatPaginator, MatDialog, MatDialogRef } from '@angular/material';\nimport { ToastService } from '../../shared/toast/toast-service';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { environment } from '../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  // Define all the variable\n  displayedColumns: string[] = ['username', 'email', 'first_name', 'last_name', 'is_active', 'date_joined', 'last_login', 'is_superuser'];\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n  // Build the table data source based on table data.\n  tableData: any = [];\n  dataSource = new MatTableDataSource(this.tableData);\n\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) msort: MatSort;\n\n  constructor(\n    private apiService: ApiService,\n    public toast: ToastService,\n    public router: Router,\n    public dialog: MatDialog,\n    private http: HttpClient\n  ) { }\n\n  ngOnInit() {\n    this.checkPerm();\n  }\n\n  checkPerm() {\n    this.apiService.loadAll('cuser').subscribe(\n      result => {\n        if (result[0].is_superuser) {\n          this.loadUsers();\n        }\n        else {\n          this.router.navigate(['/dashboard']);\n          this.toast.show(\"Permission denied!\", { classname: 'bg-danger text-light', delay: 5000 });\n        }\n      })\n  }\n\n\n  loadUsers() {\n    this.apiService.loadAll('users').subscribe(\n      (result: any) => {\n        this.dataSource.data = result;\n        this.dataSource.sort = this.msort;\n        \n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  switchSuperUser(data) {\n    let msg;\n    if (data.is_superuser) {\n      msg = \"Are you sure to revoke Superuser?\"\n    }\n    else{\n      msg = \"Are you sure to make Superuser?\"\n    }\n    if (confirm(msg)) {\n      this.apiService.parUpdate(data.id, { 'is_superuser': !data.is_superuser}, 'users').subscribe(\n        result => {\n          this.toast.show('User updated successfully!',\n            { classname: 'bg-info text-light', delay: 2500 }\n          );\n          this.updateTable(data, result);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n    }\n  }\n\n  addToTable(data) {\n    this.tableData = this.dataSource.data;\n    this.dataSource.data = this.tableData.push(data);\n    this.dataSource = new MatTableDataSource<any>(this.tableData);\n    this.dataSource.sort = this.msort;\n  }\n\n  updateTable(oldRow, newRow) {\n    this.tableData = this.dataSource.data;\n    // Remove the old data from table.\n    let index: number = this.tableData.findIndex(data => data === oldRow);\n    this.tableData.splice(index, 1);\n    // Add update row.\n    this.dataSource.data = this.tableData.push(newRow);\n    this.dataSource = new MatTableDataSource<any>(this.tableData);\n    this.dataSource.sort = this.msort;\n  }\n  openAddDialog() {\n    const dialogRef = this.dialog.open(AddUserComponent, {\n      maxWidth: '50%',\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      // Do nothing on cancel and if it return value update table.\n      if (result) {\n        this.addToTable(result);\n      }\n    });\n  }\n\n}\n\n\n@Component({\n  selector: 'app-adduser',\n  templateUrl: './adduser.component.html',\n})\nexport class AddUserComponent implements OnInit {\n  findUserResp = false;\n  regForm = this._formBuilder.group({\n    username: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    conf_password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    first_name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    last_name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    is_superuser: new FormControl('',),\n  }, { validator: [this.checkPasswords] });\n\n\n  constructor(\n    private apiService: ApiService,\n    public toast: ToastService,\n    public router: Router,\n    public dialogRef: MatDialogRef<any>,\n    private _formBuilder: FormBuilder,\n    private http: HttpClient\n\n    // @Inject(MAT_DIALOG_DATA) public dData: DialogData,\n  ) { }\n\n  ngOnInit() {\n  }\n  authentication() {\n    this.apiService.registerUser(this.regForm.value).subscribe(\n      result => {\n        this.dialogRef.close(result);\n      },\n      error => console.error(error.name)\n    );\n  }\n\n  checkPasswords(group: FormGroup) {\n\n    let pass = group.controls.password;\n    let confirmPass = group.controls.conf_password;\n    return confirmPass.setErrors(\n      pass.value !== confirmPass.value ? { notEquivalent: true } : null\n    );\n  }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserComponent, AddUserComponent } from './user.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MaterialModule } from '../../material-module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\n\nexport const UserRoutes: Routes = [\n  {\n    path: '',\n    component: UserComponent\n  },  \n];\n\n@NgModule({\n  declarations: [\n    UserComponent,\n    AddUserComponent\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbModule,\n\n    RouterModule.forChild(UserRoutes)\n  ],\n  entryComponents:[\n    AddUserComponent\n  ]\n})\nexport class UserModule { }\n"],"sourceRoot":"webpack:///"}