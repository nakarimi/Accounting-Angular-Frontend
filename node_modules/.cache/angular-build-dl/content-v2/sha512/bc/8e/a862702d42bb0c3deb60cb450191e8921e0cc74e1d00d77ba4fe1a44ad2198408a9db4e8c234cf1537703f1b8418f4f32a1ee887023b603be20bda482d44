{"version":3,"sources":["src/app/components/user/adduser.component.html","src/app/components/user/user.component.html","src/app/components/user/user.component.css","src/app/components/user/user.component.ts","src/app/components/user/user.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<h2 mat-dialog-title>Add User</h2>\\n<mat-dialog-content class=\\\"mat-typography\\\">\\n          <form [formGroup]=\\\"regForm\\\" (ngSubmit)=\\\"authentication()\\\">\\n              <mat-form-field>\\n                <mat-label>Username</mat-label>\\n                <input (change)=\\\"checkUsername()\\\" type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"username\\\" required matInput [autofocus]=\\\"true\\\"\\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('username').errors && regForm.get('username').errors.required\\\">\\n                  Username is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('username').errors && regForm.get('username').errors.minlength\\\">\\n                  Username must be at least 5 characters long.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('username').errors && regForm.get('username').errors.maxlength\\\">\\n                  Username must be at most 25 characters long.\\n                </mat-error>\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>Email</mat-label>\\n                <input (change)=\\\"checkEmail()\\\" type=\\\"email\\\" autocomplete=\\\"off\\\" formControlName=\\\"email\\\" required matInput \\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('email').errors && regForm.get('email').errors.required\\\">\\n                  Email is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('email').errors && regForm.get('email').errors.email\\\">\\n                  Email format is not correct.\\n                </mat-error>\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>First Name</mat-label>\\n                <input type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"first_name\\\" required matInput\\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                  <mat-error *ngIf=\\\"regForm.get('first_name').errors && regForm.get('first_name').errors.required\\\">\\n                    First Name is required.\\n                  </mat-error>\\n                  <mat-error *ngIf=\\\"regForm.get('first_name').errors && regForm.get('first_name').errors.minlength\\\">\\n                    First Name must be at least 5 characters long.\\n                  </mat-error>\\n                  <mat-error *ngIf=\\\"regForm.get('first_name').errors && regForm.get('first_name').errors.maxlength\\\">\\n                    First Name must be at most 25 characters long.\\n                  </mat-error>\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>Last Name</mat-label>\\n                <input type=\\\"text\\\" autocomplete=\\\"off\\\" formControlName=\\\"last_name\\\" required matInput \\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('last_name').errors && regForm.get('last_name').errors.required\\\">\\n                  Last Name is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('last_name').errors && regForm.get('last_name').errors.minlength\\\">\\n                  Last Name must be at least 5 characters long.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('last_name').errors && regForm.get('last_name').errors.maxlength\\\">\\n                  Last Name must be at most 25 characters long.\\n                </mat-error>\\n              </mat-form-field>\\n              <div>\\n                <label>Is Superuser: </label>\\n                <mat-checkbox formControlName=\\\"is_superuser\\\">Yes</mat-checkbox>\\n              </div>\\n              <mat-form-field>\\n                <mat-label>Password</mat-label>\\n                <input type=\\\"password\\\" autocomplete=\\\"off\\\" formControlName=\\\"password\\\" autocomplete=\\\"new-password\\\" required\\n                  matInput  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error *ngIf=\\\"regForm.get('password').errors && regForm.get('password').errors.required\\\">\\n                  Password is required.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('password').errors && regForm.get('password').errors.minlength\\\">\\n                  Password must be at least 5 characters long.\\n                </mat-error>\\n                <mat-error *ngIf=\\\"regForm.get('password').errors && regForm.get('password').errors.maxlength\\\">\\n                  Password must be at most 25 characters long.\\n                </mat-error>\\n\\n              </mat-form-field>\\n              <mat-form-field>\\n                <mat-label>Repeat Password</mat-label>\\n                <input type=\\\"password\\\" formControlName=\\\"conf_password\\\" autocomplete=\\\"off\\\" required matInput \\n                  [errorStateMatcher]=\\\"matcher\\\">\\n                <mat-error>\\n                  Passwords do not match, please check passwords and try again.\\n                </mat-error>\\n              </mat-form-field>\\n          \\n              <button type=\\\"submit\\\" mat-button>Create</button>\\n          </form>\\n</mat-dialog-content>\"","export default \"<button class=\\\"m-1 text-white bg-success\\\" mat-raised-button mat-button (click)=\\\"openAddDialog()\\\">Add <mat-icon>add</mat-icon></button>\\n\\n<table width=\\\"100%\\\" mat-table [dataSource]=\\\"dataSource\\\" matSort matSortActive=\\\"id\\\" matSortDisableClear\\n  matSortDirection=\\\"desc\\\">\\n\\n  <!-- Number Column -->\\n  <ng-container matColumnDef=\\\"username\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Username</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.username}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"email\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.email}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"first_name\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.first_name}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"last_name\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Name</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.last_name}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"is_active\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Is Active</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{row.is_active}}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"date_joined\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Date Joined</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{ row.date_joined | date: 'MMM d, y' }}</td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"is_superuser\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Is Superuser</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">\\n      <div [ngClass]=\\\"['super', 'superuser']\\\" *ngIf=\\\"row.is_superuser\\\">\\n        <mat-icon>check_circle</mat-icon>\\n        <div [ngClass]=\\\"'superusersync'\\\" (click)=\\\"switchSuperUser(row)\\\">\\n          <mat-icon>sync</mat-icon>\\n        </div>\\n      </div>\\n      <div [ngClass]=\\\"['nosuper', 'superuser']\\\" *ngIf=\\\"!row.is_superuser\\\">\\n        <mat-icon>cancel</mat-icon>\\n        <div [ngClass]=\\\"'superusersync'\\\" (click)=\\\"switchSuperUser(row)\\\">\\n          <mat-icon>sync</mat-icon>\\n        </div>\\n      </div>\\n      \\n    </td>\\n  </ng-container>\\n  <ng-container matColumnDef=\\\"last_login\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Login</th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">{{ row.last_login | date: 'MMM d, y HH:MM:SS' }}</td>\\n  </ng-container>\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\n</table>\"","export default \".superuser{\\r\\n  float: left;\\r\\n  width: 50px;\\r\\n}\\r\\n.superuser.super > .mat-icon {\\r\\n  color: chartreuse;\\r\\n}\\r\\n.superuser.nosuper > .mat-icon {\\r\\n  color:crimson;\\r\\n}\\r\\n.superusersync{\\r\\n  cursor: pointer;\\r\\n  display: none;\\r\\n  float: right;\\r\\n}\\r\\n.superuser:hover > .superusersync{\\r\\n  display: block;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy91c2VyL3VzZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7RUFDWCxXQUFXO0FBQ2I7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsYUFBYTtBQUNmO0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLFlBQVk7QUFDZDtBQUNBO0VBQ0UsY0FBYztBQUNoQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci91c2VyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3VwZXJ1c2Vye1xyXG4gIGZsb2F0OiBsZWZ0O1xyXG4gIHdpZHRoOiA1MHB4O1xyXG59XHJcbi5zdXBlcnVzZXIuc3VwZXIgPiAubWF0LWljb24ge1xyXG4gIGNvbG9yOiBjaGFydHJldXNlO1xyXG59XHJcbi5zdXBlcnVzZXIubm9zdXBlciA+IC5tYXQtaWNvbiB7XHJcbiAgY29sb3I6Y3JpbXNvbjtcclxufVxyXG5cclxuLnN1cGVydXNlcnN5bmN7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgZmxvYXQ6IHJpZ2h0O1xyXG59IFxyXG4uc3VwZXJ1c2VyOmhvdmVyID4gLnN1cGVydXNlcnN5bmN7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn0iXX0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ApiService } from '../../api.service';\nimport { MatTableDataSource, MatSort, MatPaginator, MatDialog, MatDialogRef } from '@angular/material';\nimport { ToastService } from '../../shared/toast/toast-service';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { environment } from '../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  // Define all the variable\n  displayedColumns: string[] = ['username', 'email', 'first_name', 'last_name', 'is_active', 'date_joined', 'last_login', 'is_superuser'];\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n  // Build the table data source based on table data.\n  tableData: any = [];\n  dataSource = new MatTableDataSource(this.tableData);\n\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) msort: MatSort;\n\n  constructor(\n    private apiService: ApiService,\n    public toast: ToastService,\n    public router: Router,\n    public dialog: MatDialog,\n    private http: HttpClient\n  ) { }\n\n  ngOnInit() {\n    this.checkPerm();\n  }\n\n  checkPerm() {\n    this.apiService.loadAll('cuser').subscribe(\n      result => {\n        if (result[0].is_superuser) {\n          this.loadUsers();\n        }\n        else {\n          this.router.navigate(['/dashboard']);\n          this.toast.show(\"Permission denied!\", { classname: 'bg-danger text-light', delay: 5000 });\n        }\n      })\n  }\n\n\n  loadUsers() {\n    this.apiService.loadAll('users').subscribe(\n      (result: any) => {\n        this.dataSource.data = result;\n        this.dataSource.sort = this.msort;\n        \n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  switchSuperUser(data) {\n    let msg;\n    if (data.is_superuser) {\n      msg = \"Are you sure to revoke Superuser?\"\n    }\n    else{\n      msg = \"Are you sure to make Superuser?\"\n    }\n    if (confirm(msg)) {\n      this.apiService.parUpdate(data.id, { 'is_superuser': !data.is_superuser}, 'users').subscribe(\n        result => {\n          this.toast.show('User updated successfully!',\n            { classname: 'bg-info text-light', delay: 2500 }\n          );\n          this.updateTable(data, result);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n    }\n  }\n\n  addToTable(data) {\n    this.tableData = this.dataSource.data;\n    this.dataSource.data = this.tableData.push(data);\n    this.dataSource = new MatTableDataSource<any>(this.tableData);\n    this.dataSource.sort = this.msort;\n  }\n\n  updateTable(oldRow, newRow) {\n    this.tableData = this.dataSource.data;\n    // Remove the old data from table.\n    let index: number = this.tableData.findIndex(data => data === oldRow);\n    this.tableData.splice(index, 1);\n    // Add update row.\n    this.dataSource.data = this.tableData.push(newRow);\n    this.dataSource = new MatTableDataSource<any>(this.tableData);\n    this.dataSource.sort = this.msort;\n  }\n  openAddDialog() {\n    const dialogRef = this.dialog.open(AddUserComponent, {\n      maxWidth: '50%',\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      // Do nothing on cancel and if it return value update table.\n      if (result) {\n        this.addToTable(result);\n      }\n    });\n  }\n\n}\n\n\n@Component({\n  selector: 'app-adduser',\n  templateUrl: './adduser.component.html',\n})\nexport class AddUserComponent implements OnInit {\n  findUserResp = false;\n  regForm = this._formBuilder.group({\n    username: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    conf_password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    first_name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    last_name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(25)]),\n    is_superuser: new FormControl('',),\n  }, { validator: [this.checkPasswords] });\n\n\n  constructor(\n    private apiService: ApiService,\n    public toast: ToastService,\n    public router: Router,\n    public dialogRef: MatDialogRef<any>,\n    private _formBuilder: FormBuilder,\n    private http: HttpClient\n\n    // @Inject(MAT_DIALOG_DATA) public dData: DialogData,\n  ) { }\n\n  ngOnInit() {\n  }\n  authentication() {\n    this.apiService.registerUser(this.regForm.value).subscribe(\n      result => {\n        this.dialogRef.close(result);\n      },\n      error => console.error(error.name)\n    );\n  }\n\n  checkPasswords(group: FormGroup) {\n\n    let pass = group.controls.password;\n    let confirmPass = group.controls.conf_password;\n    return confirmPass.setErrors(\n      pass.value !== confirmPass.value ? { notEquivalent: true } : null\n    );\n  }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserComponent, AddUserComponent } from './user.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MaterialModule } from '../../material-module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\n\nexport const UserRoutes: Routes = [\n  {\n    path: '',\n    component: UserComponent\n  },  \n];\n\n@NgModule({\n  declarations: [\n    UserComponent,\n    AddUserComponent\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbModule,\n\n    RouterModule.forChild(UserRoutes)\n  ],\n  entryComponents:[\n    AddUserComponent\n  ]\n})\nexport class UserModule { }\n"],"sourceRoot":"webpack:///","file":"components-user-user-module-es5.js"}